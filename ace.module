<?php
/**
 * @file
 * ace module primary implementation file 
 */
define('ACE_VERSION', '0.2.0');

/**
 * Implements hook_theme().
 * Adds a theme callback for input format configuration tables.
 */
function ace_theme() {
  return array(
    'ace_input_formats' => array(
      'render element' => 'form',
    ),
  );
}

function ace_requirejs_paths() {
  return array(
    'ace' => 'sites/all/libraries/ace/lib/ace',
    'ace/toolbar/default' => drupal_get_path('module', 'ace') . '/toolbar',
    'ace/keyboard/keybinding/default' => drupal_get_path('module', 'ace') . '/keybinding',
  );
}

/**
 * Implements hook_library().
 * Auto-generates library entries for all ace plugins.
 */
function ace_library() {
  return array(
    'ace' => array(
      'version' => '0.2.0',
      'js' => array(
        drupal_get_path('module', 'ace') . '/ace.js' => array(),
      ),
      'css' => array(
        drupal_get_path('module', 'ace') . '/ace.css' => array(),
      ),
      'dependencies' => array(
        array('requirejs', 'requirejs'),
        array('system', 'ui.button'),
      ),
    ),
  );
}

/**
 * Implements hook_element_info_alter().
 * Adds #after_build hooks to textarea and text_format themes.
 */
function ace_element_info_alter(&$elements) {
  $elements['textarea']['#after_build'][] = 'ace_after_build_textarea';
  $elements['text_format']['#after_build'][] = 'ace_after_build_text_format';
}

function ace_after_build_textarea($element) {
  if (array_key_exists('#ace_format', $element)) {
    $format = $element['#ace_format'];
    $element['#attributes']['data-ace-format'] = $element['#ace_format'];
    $element['#attached']['library'][] = array('ace', 'ace');
    $attach = _ace_attachments(array($format));
    $element['#attached'] = array_merge_recursive($element['#attached'], $attach);
  }
  return $element;
}

function ace_after_build_text_format($element) {
  if (array_key_exists('format', $element)) {
    $element['#attached']['library'][] = array('ace', 'ace');
    $formats = array_keys($element['format']['format']['#options']);
    $attach = _ace_attachments($formats);
    $element['#attached'] = array_merge_recursive($element['#attached'], $attach);
  }
  return $element;
}

function _ace_attachments($formats = array()) {
  $plugins = ace_get_plugins();
  $settings = ace_user_settings();
  $attachments = array();
  foreach ($settings as $component => $settings) {
    foreach ($formats as $format) {
      if ($plugin = @$settings[$format]) {
        if ($attach = @$plugins[$component][$plugin]['attached']) {
          $attachments = array_merge_recursive($attachments, $attach);
        }
      }
    }
  }
  return $attachments;
}

/**
 * Implements hook_menu().
 */
function ace_menu() {
  return array(
    'admin/config/content/ace' => array(
      'title' => t('Ace Editor'),
      'description' => t('Configure Ace editor for different input formats.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ace_settings_form'),
      'access arguments' => array('administer site configuration'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function ace_permission() {
  return array(
    'use ace editor' => array(
      'title' => t('Use the Ace editor'),
      'description' => t('Enables users to use the Ace editor instead of textareas.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ace_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];
    if (user_access('use ace editor', $account)) {
      $form['ace_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Ace editor settings'),
        '#collapsible' => TRUE,
        'input_formats' => _ace_input_formats(ace_user_settings()),
      );
    }
  }
  $form['#validate'][] = 'ace_form_user_profile_form_validate';
}

/**
 * Validation hook for user profile forms.
 */
function ace_form_user_profile_form_validate(&$form, &$form_state) {
  $form_state['values']['ace'] = serialize($form_state['input']['ace']);
}

/**
 * Implements hook_user_presave().
 */
function ace_user_presave(&$edit, $account, $category) {
  $edit['data']['ace'] = $edit['ace'];
}

function _ace_default() {
  return array(
    'modes' => array(
      'default' => 'text',
    ),
    'toolbars' => array(
      'default' => 'default',
    ),
    'themes' => array(
      'default' => 'textmate',
    ),
    'keybindings' => array(
      'default' => 'default',
    ),
  );
}

function ace_init() {
  $settings = ace_user_settings();
  drupal_add_js(array('ace' => $settings), 'setting');
}

function ace_settings() {
  $global = unserialize(variable_get('ace_configuration', serialize(array())));
  $settings = _ace_settings_merge(_ace_default(), $global);
  return $settings;
}

function ace_user_settings() {
  $settings = ace_settings();
  global $user;
  if (@$user->data && array_key_exists('ace', $user->data)) {
    $settings = _ace_settings_merge($settings, unserialize($user->data['ace']));
  }
  return $settings;
}

function _ace_settings_merge($a, $b) {
  foreach ($b as $comp => $modes) {
    foreach ($modes as $mode => $setting) {
      $a[$comp][$mode] = $setting;
    }
  }
  return $a;
}

function ace_settings_form($form, $form_state) {
  $settings = ace_settings();
  $form['ace_configuration'] = array(
    '#type' => 'value',
    '#value' => serialize($settings),
  );
  $form['ace_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Ace library path'),
    '#default_value' => variable_get('ace_path', 'sites/all/libraries/ace/lib/ace'),
  );
  $form['input_formats'] = _ace_input_formats($settings);
  $form['#theme'] = 'ace_settings';
  return system_settings_form($form);
}

function _ace_input_formats($settings) {
  $components = array('modes', 'toolbars', 'themes', 'keybindings');
  $formats = filter_formats() + array(
    'default' => (object) array('name' => 'default'),
  );
  $ace_plugins = ace_get_plugins();
  $options = array();
  foreach ($ace_plugins as $component => $plugins) {
    foreach ($plugins as $key => $plugin) {
      $options[$component][$key] = $plugin['title'];
    }
  }

  $input_formats['#theme'] = 'ace_input_formats';
  foreach ($formats as $id => $format) {
    $form['input_modes'][$id] = array(
      '#title' => $format->name,
    );
    foreach ($components as $component) {
      $input_formats[$id][$component] = array(
        '#name' => 'ace[' . $component . '][' . $id . ']',
        '#type' => 'select',
        '#options' => $options[$component],
        '#default_value' => @$settings[$component][$id],
      );
    }
  }
  return $input_formats;
}


function theme_ace_input_formats($form) {
  $table = array(
    'header' => array(
      t('Text format'),
      t('Language'),
      t('Toolbar'),
      t('Theme'),
      t('Keybinding'),
    ),
  );
  $formats = filter_formats() + array(
    'default' => (object) array('name' => 'default'),
  );
  foreach ($formats as $key => $format) {
    $table['rows'][$key] = array(
      'format' => $format->name,
    );
    foreach (array('modes', 'toolbars', 'themes', 'keybindings') as $component) {
      $table['rows'][$key][$component] = drupal_render($form['form'][$key][$component]);
    }
  }
  return theme('table', $table);
}

function ace_settings_form_validate(&$form, &$form_state) {
  foreach (array_keys($form_state['values']) as $key) {
    if (preg_match('/^ace\[/', $key)) {
      unset($form_state['values'][$key]);
    }
  }
  $form_state['values']['ace_configuration'] = serialize($form_state['input']['ace']);
}

function ace_get_plugins() {
  $plugins = array(
    'modes' => array(
      'ace/mode/html' => array('title' => 'HTML'),
    ),
    'themes' => array(
      'ace/theme/chrome' => array('title' => 'Chrome'),
      'ace/theme/clouds' => array('title' => 'Clouds'),
      'ace/theme/clouds_midnight' => array('title' => 'Clouds Midnight'),
      'ace/theme/cobalt' => array('title' => 'Cobalt'),
      'ace/theme/crimson_editor' => array('title' => 'Crimson Editor'),
      'ace/theme/dawn' => array('title' => 'Dawn'),
      'ace/theme/dreamweaver' => array('title' => 'Dreamweaver'),
      'ace/theme/eclipse' => array('title' => 'Eclipse'),
      'ace/theme/idle_fingers' => array('title' => 'Idle Fingers'),
      'ace/theme/kr_theme' => array('title' => 'KR Theme'),
      'ace/theme/merbivore' => array('title' => 'Merbivore'),
      'ace/theme/merbivore_soft' => array('title' => 'Merbivore Soft'),
      'ace/theme/mono_industrial' => array('title' => 'Mono Industrial'),
      'ace/theme/monokai' => array('title' => 'Monokai'),
      'ace/theme/pastel_on_dark' => array('title' => 'Pastel on Dark'),
      'ace/theme/solarized_dark' => array('title' => 'Solarized dark'),
      'ace/theme/solarized_light' => array('title' => 'Solarized light'),
      'ace/theme/textmate' => array('title' => 'TextMate'),
      'ace/theme/tomorrow' => array('title' => 'Tomorrow'),
      'ace/theme/tomorrow_night' => array('title' => 'Tomorrow Night'),
      'ace/theme/tomorrow_night_blue' => array('title' => 'Tomorrow Night blue'),
      'ace/theme/tomorrow_night_bright' => array('title' => 'Tomorrow Night bright'),
      'ace/theme/tomorrow_night_eighties' => array('title' => 'Tomorrow Night eighties'),
      'ace/theme/twilight' => array('title' => 'Twilight'),
      'ace/theme/vibrant_ink' => array('title' => 'Vibrant Ink'),
    ),
    'toolbars' => array(
      'ace/toolbar/default' => array('title' => 'No toolbar'),
    ),
    'keybindings' => array(
      'ace/keyboard/keybinding/default' => array('title' => 'Default'),
      'ace/keyboard/keybinding/vim' => array('title' => 'Vim'),
      'ace/keyboard/keybinding/emacs' => array('title' => 'Emacs'),
    ),
  );
  drupal_alter('ace_plugins', $plugins);
  return $plugins;
}
